
params.max_retries = 3
// Maximum jobs to submit to the SLURM queue at once
params.queue_size = 1000
// Number of processors to use for local execution
params.processors = 4
// Account for SLURM
params.slurm_account = 'slurm_account'

params.reads='reads/*fastq.gz'
params.outdir='assemblies'
params.run_filtlong='true'
params.run_medaka='true'
params.run_polypolish='true'
params.run_polca='true'
params.polca_env='/path/to/polca/env'
params.clinopore_env='/path/to/clinopore/env'
params.medaka_model='r941_min_sup_g507'
params.failure_action='terminate'

profiles {
  massive {
    executor {
      name = 'slurm'
      // Queue size
      queueSize = params.queue_size
      // Submission rate to 2 per second
      submitRateLimit = '2/1.seconds'
      // Modify job-name, replace 'nf' with 'rd'
      // For whatever reason I can't access task.processor.name here so instead we do
      // a string sub to achieve desired result (nextflow 20.04.1)
      jobName = { "clinopore-${task.name}".replace(' ', '_') }
    }

    process {
      // Retry jobs - typically with more resources
      // NOTE: referencing task.maxRetries in the errorStrategy closure causes a recursion loop in nf
      // during task resubmission and crashes due to a stack overflow; must be specified as done below
      maxRetries = params.max_retries
      errorStrategy = { task.attempt < params.max_retries ? 'retry' : 'ignore' }

      // Required for consistent resumes on massives NFS
      cache = 'lenient'

      // Set options absent from nf slurm api
      clusterOptions = {
        qos = ''
        partition = ''
        if (task.time <= 30.minutes) {
          qos = 'genomics'
          partition = 'comp,genomics,short'
        } else if (task.time <= 240.minutes) {
          qos = 'genomics'
          partition = 'comp,genomics'
        } else {
          qos = 'rtq'
          partition = 'comp'
        }
	return "--account=${params.slurm_account} --qos=${qos} --partition=${partition}"
      }
    }

    process {

      withName: FILTER {
        time = { 30.minutes * task.attempt }
        memory = { 4096.MB * task.attempt }
      }
      withName: ASSEMBLE {
        time = { 600.minutes * task.attempt }
        memory = { 10000.MB * task.attempt }
      }

      withName: MEDAKA {
        time = { 30.minutes * task.attempt }
        memory = { 10000.MB * task.attempt }
      }

      withName: POLYPOLISH {
        time = { 30.minutes * task.attempt }
        memory = { 10000.MB * task.attempt }
      }

      withName: POLCA {
        time = { 30.minutes * task.attempt }
        memory = { 10000.MB * task.attempt }
      }

      }
  }

  standard {
    executor {
	name = 'local'
        queueSize = params.processors
    }
    process.memory='16 GB'
    proccess.cpus=16
    process.errorStrategy="${params.failure_action}"

  }
}

